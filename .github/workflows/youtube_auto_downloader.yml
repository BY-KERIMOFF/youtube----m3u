name: YouTube Auto Downloader

description: >
  Bu sistem bir YouTube kanalƒ±ndan son videonu avtomatik tapƒ±r, d…ôyi≈üiklik olduqda yenil…ôyir v…ô videonu y√ºkl…ôyir.

version: "1.0"

dependencies:
  - python>=3.8
  - feedparser
  - yt-dlp

settings:
  channel_id: "UCOqe-z52nnpVSAe8Ds0fxaA"
  check_interval_seconds: 300
  last_video_file: "last_video.txt"
  download_folder: "downloads"
  output_template: "%(upload_date)s_%(title)s.%(ext)s"

script: |
  import feedparser
  import time
  import subprocess
  import os

  CHANNEL_ID = "UCOqe-z52nnpVSAe8Ds0fxaA"
  CHECK_INTERVAL = 300
  LAST_VIDEO_FILE = "last_video.txt"
  DOWNLOAD_FOLDER = "downloads"

  def get_latest_video_url(channel_id):
      feed_url = f"https://www.youtube.com/feeds/videos.xml?channel_id={channel_id}"
      feed = feedparser.parse(feed_url)
      return feed.entries[0].link if feed.entries else None

  def read_last_video():
      try:
          with open(LAST_VIDEO_FILE, "r") as f:
              return f.read().strip()
      except FileNotFoundError:
          return ""

  def write_last_video(url):
      with open(LAST_VIDEO_FILE, "w") as f:
          f.write(url)

  def download_video(video_url):
      if not os.path.exists(DOWNLOAD_FOLDER):
          os.makedirs(DOWNLOAD_FOLDER)
      print(f"üé• Y√ºkl…ônir: {video_url}")
      subprocess.run([
          "yt-dlp",
          "-o", os.path.join(DOWNLOAD_FOLDER, "%(upload_date)s_%(title)s.%(ext)s"),
          video_url
      ])

  def main():
      while True:
          print("‚è±Ô∏è  YouTube yoxlanƒ±lƒ±r...")
          latest = get_latest_video_url(CHANNEL_ID)
          if latest:
              last_saved = read_last_video()
              if latest != last_saved:
                  print("‚úîÔ∏è Yeni video tapƒ±ldƒ±!")
                  write_last_video(latest)
                  download_video(latest)
              else:
                  print("üîÑ H…ôl…ô yenilik yoxdur.")
          else:
              print("‚ö†Ô∏è Kanaldan video alƒ±nmadƒ±.")
          time.sleep(CHECK_INTERVAL)

  if __name__ == "__main__":
      main()
